;	30-SEP-76
;	04:50:00
	.TITLE NIGHT DRIVER
	.SBTTL PAGE ZERO EQUATES
	.ASECT
	.=110000
;***************************************************
;***	MISCELLANEOUS EQUATES FOR PAGE ZERO      ***  
;***************************************************
ZLOW	=2
COINC	=0	;CREDIT COUNTER
COINT	=1	;COIN TIMER
SYNC	=2	;INTERRUPT CONTROL
GAS	=3	;NO
SKDCTL	=4	;NO
STEER	=5	;CURRENT STEERING VALUE
XSVE	=6
ORVH	=7	;ORIGIN MSB'S
ZCNTRL	=10	;CNTRL = 32 POSITIONS
ZXAX	=50	;XAXIS = 32 POSITIONS
ZYAX	=110	;YAXIS=32
PYA	=150	;ADJUSTED Y POSITION
VELL	=151	;VELOCITY
VELH	=152
STCL	=153	;STEERING CONSTANT (VEL*STEER)
STCH	=154
PYAVL	=155	;ADJUSTED POSITION*VELOCITY
PYAVH	=156
VELKL	=157	;VELOCITY ADJUSTED BY K (VEL*K)
VELHL	=160
PRODL	=161	;PRODUCT TERM USED BY MULTIPLY ROUTINE
PRODH	=162
ORL	=163	;ORIGIN MIDDLE BYTE
ORH	=164	;ORIGIN LSB
TURNL	=165	;TURN DISTANCE COVERED
TURNH	=166
DIST	=167	;TURN DISTANCE REQUIRED BY TRACK
FRMTME	=170	;NUMBER OF FRAMES PER CLOCK TICK
TRNDX	=171	;INDEX USED TO FETCH DATA FROM TRACK TABLE
CS	=172	;COIEFFICIENT OF SHARPNESS OF TURN
OBJTML	=173	;DISTANCE DRIVEN BETWEEN PYLONS (ALSO OBJTMH)
EPSCR	=174	;EXTENDED PLAY SCORE
SMOKE	=175	;SCREECH TIME AT FIRST AND SECOND GEAR
SECNDH	=176
R7	=177
TDISTL	=200	;TOTAL TRACK DISTANCE COVERED FROM GAME START
TDISTM	=201
TDISTH	=202
TDSTVH	=203
MLTPLR	=204
R4	=204
MLTCDL	=205
R0	=205
MLTCDH	=206
R1	=206
OBJTMH	=207
R2	=210
R3	=211
CRVL	=212	;TURNING COIEFFICIENT (CS*VELOCITY)
CRVH	=213
PYAVKL	=214	;PYA*KP*VELOCITY
PYAVKH	=215
FRMCL	=216	;TOTAL FRAME COUNT
FRMCH	=217
R5	=220
R6	=221	;GAME TIME (STORED PACKED BCD)
ZHI	=221
GTML	=ZHI+1
GTMH	=ZHI+2
TRMAX	=ZHI+3	;NUMBER OF ENTRIES IN TRACK TABLE
TRKADL	=ZHI+4	;ADDRESS OF TRACK TABLE
TRKADH	=ZHI+5
OLDTK	=ZHI+6	;TRACK CURRENTLY USING OR LAST TRACK USED
HML	=ZHI+7	;HIGH SCORE (STORED BCD)
HMH	=ZHI+10
TPSPDL	=ZHI+13	;PLAYER'S TOP SPEED (BCD)
TPSPDH	=ZHI+14
PRTSDL	=ZHI+17	;PREVIOUS TOP SPEED (BCD)
PRTSDH	=ZHI+20
MILEL	=ZHI+21	;PLAYER'S SCORE (BCD)
MILEM	=ZHI+22
TOPZ	=ZHI+23	;TABLE OF PREVIOUS HIGH SCORES FOR ALL TRACKS (12 BYTES)
ZVHI	=ZHI+36


;****************************************************
;***						  ***
;***		GAME CONTROL CONSTANTS		  ***
;****************************************************

PYMIN	=100	;HORIZON
XMIN	=30	;LEFT LIMIT OF SCREEN
CRLFT	=130	;CRASH POINT ON LEFT SIDE
XMAX	=350	;RIGHT LIMIT OF SCREEN
CRRHT	=250	;CRASH POINT ON RIGHT SIDE
BOTTOM	=350	;BOTTOM OF SCREEN
NOT	=12	;NUMBER OF DISTANCE UNITS BETWEEN PYLONS
PRSPC	=10	;DISTANCE BETWEEN PYLON PAIR AT ORIGIN
MINPIC	=34	;SMALLEST PICTURE
	.SBTTL ADDRESS MAP EQUATES
;****************************************************
;***						  ***
;***		OBJECT CONTROL ADDRESSES	  ***
;***						  ***
;****************************************************


PLYFLD	=1000		;PLAYFIELD (12)
XAXIS	=2000		;H(16)
YAXIS	=2020		;V(16)
PICTR	=2040		;C(16)
WTCHDG	=2060
TIME	=3000		;GAME OPT(2**7,2**6,2**5,2**4)
TESTSW	=3001		;MSB(N); VBLANK (2**6)
EPSW	=3001		;BONUS TIME ALLOWED (2**5); TRACK SET SELECT (2**4)
GEARS	=3002		;GEARS (2**6,2**5,2**4)
STRNG	=3003		;STEERING (2**7,2**6)
EASY	=3003		;EASY/HARD (2**5); SPARE (2**4)
COINAS	=4000		;COIN SW (MSB)
COINBS	=4001		;COIN SW
STRTSW	=4002		;START GAME SWITCH
ACCEL	=4003		;ACCELERATOR
TRKSW	=4004		;TRACK SELECT 4,5
POWER	=4006		;LINE POWER
CYC56	=4007		;50/60 MODE SWITCH
OUT1	=5000		;MOTOR, SCREECH
OUT2	=6000		;CRASH, SLMP, THUMPER
OUT3	=7000		;SPARE OUTPUT
PFR	=100000		;PLAYFIELD READ
STRST	=102000		;STEERING RESET

;	PLAYFIELD ADDRESSES

PHS	=15		;PREVIOUS HIGH SCORE
YTPSPD	=134		;PLAYERS SCORE
PPTP	=34		;PREVIOUS TOP SPEED
PSCORE	=115		;PLAYER'S TOP SPEED


;**********************************************************
;***	        					***
;***							***
;***			FORMULAS			***
;***     VEL=VEL +GTBL(GEAR.GAS.VEL) - DTBL(.GEAR)      ***
;***		     VELK=(VEL)(KP)			***
;***		     STC=(STEER)(VEL)			***
;***		     PXO=PXO-(PYA)(VELK)+STC		***
;***		     PXE=PXE+(PYA)(VELK)+STC		***
;***		     PYA=PY-PYMIN-2.			***
;***		     PY=PY+(PYA)(VEL)			***
;***							***
;**********************************************************
	.SBTTL MESSAGES
ORG	=.


MESS0:	.BYTE 101
	.ASCIZ /YOUR@SCORE/
	.BYTE 123
	.ASCIZ /TOP@SPEED/
	.BYTE 0
MESS1:	.BYTE 1
	.ASCIZ /HIGH@SCORE/
	.BYTE 23
	.ASCIZ /TOP@SPEED/
	.BYTE 0
MT:	.BYTE 70
	.ASCIZ /TIME/
	.BYTE 0
ATARI:	.BYTE 70
	.BYTE 200,100,300,301,224,101,122,211,0,0
ROMM:	.BYTE 141
	.ASCIZ /ROM@/
	.BYTE 0
OFFRD:	.BYTE 112
	.ASCIZ	/OFF@THE@ROAD/
	.BYTE 145
	.ASCIZ	/WAIT@FOR@THE@TOW@TRUCK/
	.BYTE 0

OPT:	.BYTE 101
	.ASCIZ /OPTIONS=@/
	.BYTE 0
	.SBTTL TEST PROGRAM
TEST:	LDX I,0			;TEST ALL FUNCTIONS OF GAME
	LDY I,0			;FIRST TEST PAGE ZERO
ZLP:	STY ZX,0		;WRITE PG ZERO ADDRESS INTO CELL
	INX
	INY			;FILL ALL OF PAGE ZERO
	BNE ZLP
ZTST:	TXA			;NOW GO CHECK TO SEE IF PAGE ZERO WORKED
	CMP ZX,0		;PG ZERO CELL = PG ZERO ADDRESS
	BEQ ZPOK		;YES
	EOR ZX,0		;SET FAILIING BIT(S)
	TAY			;SAVE IT (THEM)
ZPERR:	LDA I,40		;NO. SIGNAL BAD PAGE ZERO
	STA Z,SYNC
	CLI			;ALLOW FOR INTERRUPT
	JMP ZPERR		;WAIT FOR INTERRUPT
ZPOK:	INX
	BNE ZTST
	LDX I,ZVHI-ZLOW+1
	JSR CLRZVH		;CLEAR PAGE ZERO
TESTS:	STA Z,COINC
	STA Z,COINT
	LDA I,17
	STA A,OUT1		;TURN OFF SOUNDS, MOTOR = LOW RPM
	LDA I,3
	STA A,OUT2
	JSR BLKSC		;BLANK SCREEN
TST0:	LDY I,0
	STY Z,R7		;PREPARE TO DO CHECKSUM
	LDA I,RESET&377
	STA Z,R2
	LDA I,RESET&-400/400
	STA Z,R3		;STORE STARTING ADDRESS
	LDA I,4
	STA Z,R6
	LDA I,5
	STA Z,R4		;COUNT OF 1K CHUNKS *2-1
CKSLP0:	LDA I,0
	STA Z,R5
	LDX I,3
CKSLP1:	LDA NY,R2		;READ DATA FROM ROM
	CLC
	ADC Z,R5		;ACCUMULATE CHECKSUM
	STA Z,R5
	INY			;CONTINUE FOR 256 BYTES
	BNE CKSLP1
	INC Z,R3
	DEX			;CONTINUE FOR 4 BLOCKS OF 256 BYTES (1024 BYTES)
	BPL CKSLP1
	LDX Z,R4
	LDA AX,CHKADR		;GET HIGH ADDRESS BYTE OF ROM CHECKSUM
	STA Z,R1
	DEX
	LDA AX,CHKADR		;GET LOW ADDRESS
	STA Z,R0
	LDA Z,R5
	CMP NY,R0		;COMPARE ROM CHECKSUM WITH COMPUTED CHECKSUM
	BEQ CKSLP2		;GOOD
	LDA Z,R6		;NO GOOD
	ORA Z,R7		;FLAG ROM PAIR BAD
	STA Z,R7		;CONTINUE
CKSLP2:	LSR Z,R6
	STA A,WTCHDG
	DEC Z,R4		;CONTINUE FOR 3 GROUPS OF 1024 BYTES
	DEC Z,R4
	BPL CKSLP0
	LDA I,20		;CONFUSE VSYNC PROCESSOR TO NOT UNPACK SCORES
	STA Z,FRMCL		;AND TO BLANK GAME OVER/BONUS TIME.
	BIT A,TESTSW		;TEST MODE?
	BMI SKPOBJ		;NO
	JSR STST2		;YES, INTITALIZE ALL 16 MOVING OBJECTS TO TEST PATTERN.
SKPOBJ:	LDA I,300
	STA Z,SYNC		;ENABLE VSYNC PROCESSING
	JSR SYNWT		;WAIT FOR SYNC
	STA A,WTCHDG
	LDX I,ROMM-MESS0-1	;WRITE ROM
	JSR MESLP
CKSLP4:	LDA Z,R7		;ANY CHECKSUM ERRORS?
	BEQ CKSLP5		;NO
	ORA I,60		;YES
	STA A,PLYFLD+144	;WRITE THE ROM ERROR CODE ON SCREEN.
	BIT A,TESTSW		;TEST MODE?
	BPL CKSLP8		;YES. CONTINUE TEST
	JMP TST0		;ELSE REPEAT CHECKSUM TEST.
CKSLP5:	BIT A,TESTSW		;TEST MODE?
	BPL CKSLP7		;YES.
	JSR CLRZRO		;NO. CLEAR PAGE ZERO
	JMP BEGIN		;BEGIN ATTRACT MODE
CKSLP7:	LDA I,117
	STA A,PLYFLD+144	;WRITE 'O'
	LDA I,113
	STA A,PLYFLD+145	;WRITE 'K'
CKSLP8:	LDX I,OPT-MESS0-1
	JSR MESLP		;WRITE OPTIONS=ON THIRD LINE
	LDX I,1
	LDY I,0
	JSR SYNWT
	STA A,WTCHDG
ABC:	TXA
	STA AY,PLYFLD		;WRITE ABCD...Z ON TOP LINE
	INY
	INX
	CPX I,27.
	BMI ABC
	LDX I,60
	LDY I,40
	JSR SYNWT
	STA A,WTCHDG
N09:	TXA
	STA AY,PLYFLD		;WRITE 0-9 ON SECOND LINE
	INY
	INX
	CPX I,72
	BMI N09
PFTST:	JSR SYNWT
	STA A,WTCHDG
	LDA A,TIME
	LSR
	LSR
	LSR
	LSR
	TAX
	LDA AX,HEX
	STA A,PLYFLD+110	;WRITE TIME SWITCH ON THIRD LINE
	LDA A,TESTSW		;CONVERT DIP SWITCH READINGS TO BINARY
	LSR
	LSR
	AND I,14
	STA Z,R0
	LDA A,EASY
	AND I,60
	ORA Z,R0
	LSR
	LSR
	TAX
	LDA AX,EPDCOD		;CONVERT ORDER TO CONFORM TO SWITCH
	STA Z,R0
	LDX I,0
EPLP:	LSR Z,R0		;PUT BIT INTO CARRY
	LDA I,30		;SET 1/2 OF ASCII FOR '0'
	ROL			;DOUBLE IT AND SHIFT CARRY INTO LSB
	STA AX,PLYFLD+113	;WRITE SEQUENCE OF 4 BINARY DIGITS 0000-1111
	INX
	CPX I,4
	BMI EPLP
CKSLP6:	LDX I,5			;PREPARE FOR SOUND TEST
	LDA I,23
	STA A,OUT2		;TURN ON LAMP
	LDA I,200
SNDLP0:	AND AX,COINAS
	DEX
	BPL SNDLP0
	AND I,200		;ANY SWITCHES CLOSED?
	BMI SNDLP1		;NO
	LDA I,37		;YES. TURN ON SCREECH
	BNE SNDLP2
SNDLP1:	LDA I,17		;NO. TURN OFF SCREECH
SNDLP2:	STA Z,R0
	LDA A,GEARS
	AND I,160
	EOR I,160		;ANY GEARS DOWN?
	BEQ SNDLP3		;NO
	LDA I,20
SNDLP3:	ORA Z,R0		;TURN ON/OFF SCREECH SOUND
	STA A,OUT1
	LDA I,1
	BIT A,STRNG		;ANY STEERING
	BPL STLPT0		;NO
	BVC STLPT1		;RIGHT?
	LDA I,377		;LEFT
STLPT1:	STA Z,R4
	STA A,STRST		;RESET STEERING BIT
	LDA Z,ZXAX+37		;INITIALIZE REGS. FOR OBJECT MOVE
	CLC
	ADC Z,R4
	STA Z,R0
	LDA Z,ZXAX+35
	CLC
	ADC Z,R4
	STA Z,R1
	JSR STST1		;GO MOVE ALL OBJECTS RIGHT/LEFT
STLPT0:	BIT A,TESTSW		;STILL IN TEST MODE?
	BMI JR			;NO
	JMP PFTST		;YES, REPEAT TEST
JR:	JMP RESET


STST2:	LDA I,60
	STA Z,R1		;X1 POSITION
	LDA I,220
	STA Z,R0		;X2 POSITION
STST1:	LDA I,16.
	STA Z,R4
STST3:	LDA I,60
	STA Z,R3		;Y POSITION
	LDA I,240.		;PICTURE DATA
	STA Z,R2
	LDX I,37		;Z DATA INDEX
STST0:	LDA Z,R2
	STA ZX,ZCNTRL		;STORE PICTURE
	LDA Z,R3
	EOR I,377		;FLIP Y POSITION
	STA ZX,ZYAX		;STORE Y POSITION
	LDA Z,R0
	STA ZX,ZXAX		;STORE X POSITION
	DEX
	DEX
	LDA Z,R2
	CLC
	ADC I,241.		;UPDATE PICTURE
	STA Z,R2
	STA ZX,ZCNTRL		;NEXT PICTURE
	LDA Z,R1
	STA ZX,ZXAX		;NEXT X
	LDA Z,R3
	EOR I,377		;FLIP Y POSITION
	STA ZX,ZYAX		;NEXT Y
	LDA Z,R2
	CLC
	ADC I,241.		;UPDATE PICTURE
	STA Z,R2
	LDA Z,R3
	CLC
	ADC I,16.
	STA Z,R3		;UPDATE Y
	LDA Z,R0
	CLC
	ADC Z,R4
	STA Z,R0		;UPDATE X1
	LDA Z,R1
	CLC
	ADC Z,R4
	STA Z,R1		;UPDATE X2
	DEX
	DEX
	BPL STST0
	RTS


HEX:	.ASCII /0123456789ABCDEF/			;CONVERSION FOR OPTION SWITCH
EPDCOD:	.BYTE 0,2,1,3,4,6,5,7,8.,10.,9.,11.,12.,14.,13.,15.	;CONVERSION FOR DIP SWITCH
	.EVEN
TKADT:	.WORD EPTRK,PROTRK,NOTRK
TKMXT:	.BYTE EE-EB,ATRK-PROTRK,NE-NB
NB:
NOTRK:	.BYTE 0,127.,0,127.,40,177,0,127.,240,177
NE:
EB:
EPTRK:	.BYTE 0,127.,0,127.,30,127.,35,54.,230,72.
	.BYTE 0,36.,240,72.,0,127,40,91.,0,108.
	.BYTE 40,91.,0,63.,220,63.,0,36.,35,127
	.BYTE 0,108.,245,127.,220,91.,40,127,30,127
	.BYTE 32,82.,234,127.,220,91.,44,127,30,54.
EE:
PROTRK:	.BYTE 0,127.,0,127.,40,100,0,70,240,60,0,30,44,50
	.BYTE 14,40,50,30,245,50,0,70,45,20,210,40
	.BYTE 245,100.,45,64.,0,32,245,100.

ATRK:	.BYTE 0,127.,17,100,217,177,17,100
ATRKMX	=.-ATRK
DTBL:	.BYTE 6,5,4,3
GTBL:	.BYTE 161,21,161,21,141,21,142,21,123,21,64,21,45,41,5,41
	.BYTE 5,41,364,41,363,61,362,61,341,61,340,101,340,101,320,101
	.BYTE 337,62,337,62,317,42,317,22,317,2,276,3,276,3,276,363
	.BYTE 256,363,256,363,255,363,235,363,235,343,235,343,234,343,234,342

MOTOR:	.BYTE 377,377,317,377,237,377,155,377,074,377,032,377,010,357,007,337
	.BYTE 006,317,005,277,004,256,003,235,002,215,002,174,002,153,002,132
	.BYTE 002,131,002,110,002,067,002,067,002,046,002,045,002,044,002,044
	.BYTE 002,043,002,042,002,042,002,042,002,042,002,042,002,042,002,042
GO:	.ASCIZ /GAME@OVER@/
EPMSG:	.ASCIZ /BONUS@TIME/
PZRERR:	.ASCII /ERR@Z@/
PZE:	.ASCIZ /@@@@/

IPIX:	.BYTE 53,52,70,125,34,34,34
IXD:	.BYTE 154,207,141,222,114,246
	.BYTE 46,314,165,176,163,177,161,201
IYD:	.BYTE 115,134,167,252,100,102,105

MPHL:	.BYTE 60,61,63,64,65,66,70,71
	.REPT 112000-.
	.BYTE 377
	.ENDR
OIN:.SBTTL GAME
;****************************************************
;***						  ***
;***			MAIN GAME		  ***
;***						  ***
;****************************************************
;
; SYNC	0 = SYNC PROCESSED
;	1 =
;	2 =
;	3 = BONUS SCORE REACHED
;	4 = BONUS TIME
;	5 = ERR 1
;	6 = PROCESS SYNC
;	7 = ATTRACT MODE
;


	.=112000		;9400

RESET:	SEI
	LDX I,377
	TXS
	CLD
	LDA I,VSYNC&377
	STA A,177776		;INTERRUPT VECTOR LOW=FFFE
	LDA I,VSYNC&-400/400	
	STA A,177777		;INTERRUPT VECTOR HIGH=FFFF
	JMP TEST
BEGIN:	JSR BLKSC
	JSR PUTMSG
	JSR MESLP
	JMP ATTRCT

CHK1K:	.BYTE 322,56		;ROM CHECKSUM FOR 9400-97FF

BLKSC:	LDX I,7			;BLANK SCREEN ROUTINE
	LDY I,PLYFLD&377
	STY Z,PRODL
	LDA I,PLYFLD&-400/400
	STA Z,PRODH
BLANK:	JSR SYNWT		;PAUSE BETWEEN BLOCKS
	STA A,WTCHDG		;WATCH DOG
	LDY I,15.		;DO 16 BYTES AT A TIME
BLANK0:	LDA I,0			;CLEAR PLAYFIELD RAM
	STA NY,PRODL
	DEY
	BPL BLANK0
	LDA I,16.
	CLC
	ADC Z,PRODL		;UPDATE INDIRECT ADDRESS
	STA Z,PRODL
	DEX			;CONTINUE ACROSS 8 BLOCKS OF 16 BYTES
	BPL BLANK
	RTS			;EXIT

PUTMSG:	LDX I,377
MESLP:	INX
	LDY AX,MESS0		;GET SCREEN DESTINATION ADDRESS
	BNE CONTM
	RTS
CONTM:	JSR SYNWT
	STA A,WTCHDG		;WATCH DOG
MESLP1:	INX
	LDA AX,MESS0
	BEQ MESLP
	STA AY,PLYFLD-1
	INY
	BNE MESLP1

ATTRCT:	JSR CLRZRO
	JSR SYNWT
	STA A,WTCHDG
	LDX I,MESS1-MESS0-1
	JSR MESLP		;WRITE TOP LINE
	LDX I,ATARI-MESS0-1
	JSR MESLP		;WRITE ATARI
	LDA I,300		;SET ATTRACT MODE, PROCESS VSYNC
	STA Z,SYNC
	JSR INTZRO		;SET OBJECT TABLES
	LDA I,ATRK&-400/400		;SET ATTRACT MODE TRACK.
	STA Z,TRKADH
	LDA I,ATRK&377
	STA Z,TRKADL
	LDA I,ATRKMX
	STA Z,TRMAX
	JMP MAIN		;RUN GAME DURING ATTRACT MODE

GMTIMD:	.BYTE 30.,45.,60.,75.		;FRAMES PER CLOCK TICK
CNINC:	.BYTE 4,2,2,1			;(CREDITS/COIN)*2

					;EASY
SCRTBL:	.BYTE 264,163,131,107		;PRO (2.8,1.8,1.4,1.12)
	.BYTE 264,163,131,107		;EXPERT (2.8,1.8,1.4,1.12)
	.BYTE 264,163,131,107		;NOVICE (2.8,1.8,1.4,1.12)


					;HARD
	.BYTE 237,150,112,100		;PRO (2.45,1.63,1.22,1.00)
	.BYTE 237,150,112,100		;EXPERT (2.45,1.63,1.22,1.00)
	.BYTE 237,150,112,100		;NOVICE (2.45,1.63,1.22,1.00)
COIN:	LDA A,TIME		;FIND OUT HOW MANY CREDITS PER COIN
	LSR
	LSR
	LSR
	LSR
	AND I,3
	TAX
	LDA AX,CNINC		;GET CREDITS PER COIN
	STA Z,R0		;SAVE IT
	LDA I,0			;CLEAR COIN TIMER
	STA Z,R2
	STA Z,R3
COINA0:	LDA Z,COINT		;TIMING COIN HIGH OR LOW
	AND I,200		;MSB SETS IF COIN HAS BEEN TIMED HIGH
	STA Z,R1
COINA1:	LDA A,COINAS
	STA A,WTCHDG
	EOR Z,R1		;COIN SWITCH TIME OK?
	BMI COINA3		;NO
	BIT Z,R1		;PAST UP TIME?
	BMI COINA2		;YES. COUNT COIN
	DEC Z,R2		;DEBOUNCE TIME OUT?
	BEQ COINA4		;YES
	JSR COINB		;NO. DO COIN B
	JMP COINA1
COINA4:	LDA Z,COINT
	EOR I,200		;SET COIN TIMED OUT
	STA Z,COINT
COINA3:	LDA I,0			;CLEAR COIN TIMER
	STA Z,R2
	JSR COINB		;ANY B COIN?
	BCS COINA0		;YES. CONTINUE TIMING
	BCC CEND		;NO. END

COINA2:	NOP			;COUNT COIN
	LDA Z,COINT
	AND I,177		;DROP COIN DETECTED BIT
	CLC
	ADC Z,R0		;GET CREDIT COUNT
	STA Z,COINT
	BPL COINA3

COINB:	LDA Z,COINT
	ASL
	AND I,200		;MSB SETS IF COIN HAS BEEN TIMED HIGH
	STA Z,R4
COINB1:	LDA A,COINBS		;COIN SWITCH
	EOR Z,R4		;COIN SWITCH TIME OK
	BMI COINB3		;NO
	BIT Z,R4		;PASSED UP TIME?
	BMI COINB2		;YES COUNT COIN
	DEC Z,R3		;NO. DEBOUNCE TIME OUT?
	BEQ COINB4		;YES
	SEC			;SIGNAL TIMING B COIN
	RTS			;EXIT
COINB4:	LDA Z,COINT		;INDICATE DEBOUNCE OK
	EOR I,100
	STA Z,COINT
COINB3:	LDA I,0			;CLEAR DEBOUNCE TIMER
	STA Z,R3
	CLC			;SIGNAL NO LONGER TIMING
	RTS 			;EXIT
COINB2:	LDA Z,COINT
	AND I,277		;DROP COIN DETECTED BIT
	CLC
	ADC Z,R0		;ACCUMULATE CREDIT
	STA Z,COINT
	BPL COINB3		;EXIT


CEND:	LDA Z,COINT
	AND I,77		;ANY COINS COUNTED?
	BEQ COINS		;NOPE
	BIT A,CYC56		;YES. 50/60 CYCLE?
	BPL CE1			;50 CYCLES
CE2:	BIT A,POWER		;DOWN STROKE?
	BPL CE2			;YES. WAIT FOR UP STROKE
	STA A,WTCHDG
	JSR LFC
	BCC CE3
	JMP COIN		;YES
CE3:	BIT A,POWER		;UP STROKE?
	BMI CE3			;YES. WAIT FOR DOWN STROKE
	STA A,WTCHDG
CE5:	LDX I,191.
CE4:	BIT A,POWER		;OK?
	BMI CE1			;60 CYCLES
	JSR LFC			;SEE IF ANY MORE COINS ARE PRESENT
	BCC CE6			;NO
	JMP COIN		;YES. PROCESS NEW COIN
CE6:	DEX
	BNE CE4
	STX Z,COINC		;ZERO. COIN CREDIT
	STX Z,COINT		;POWER IS 50 CYCLES BUT OPTION IS 60 CYCLES
CE1:	LDA Z,COINT
	AND I,77
	CLC
	ADC Z,COINC		;ACCUMULATE CREDITS
	STA Z,COINC
	LDA Z,COINT		;CLEAR COIN CREDITS
	AND I,300
	STA Z,COINT
COINS:	CLC
	BIT Z,SYNC		;ATTRACT MODE?
	BMI COINS0		;YES
	RTS			;NO. EXIT
COINS0:	LDA I,17
	STA A,OUT1		;LOW RPM, SCREECH
	LDA I,376
	BIT Z,COINC		;ANY COINS
	BNE COINS1		;YES
	LDA I,3			;NO
	STA A,OUT2		;TURN OFF START LAMP, CRASH
	RTS
COINS1:	LDA I,23		;TURN ON SG LAMP
	STA A,OUT2
	BIT A,STRTSW		;START BUTTON PUSHED?
	BMI COINS2		;NO
	DEC Z,COINC		;YES. SUBTRACT COIN CREDIT
	DEC Z,COINC
	LDX I,377		;RESET STACK
	TXS
	JMP GAME		;START GAME
COINS2:	RTS

LFC:	LDA A,COINBS		;LOOK FOR COIN ROUTINE
	LSR
	CLC
	ORA A,COINAS
	AND I,300		;GET BOTH COIN MECH STATUS
	EOR I,300
	STA Z,R0
	LDA Z,COINT		;DO THEY MATCH WHAT'S EXPECTED (COINT)?
	AND I,300
	EOR Z,R0
	BEQ LFC0		;YES
	SEC			;NO. SIGNAL A CHANGE OF COIN MECH STATUS
LFC0:	RTS			;EXIT

GTM:	LDA A,TIME		;GET TIME OPTION
	ROL
	ROL
	ROL			;PUT 2 MSB'S INTO 2 LSB'S
	AND I,3			;MASK
	TAX
	ORA Z,OLDTK		;ADD THE TRACK NUMBER
	TAY
	LDA I,40
	BIT A,EASY		;EASY SCORING SELECTED?
	BNE EBT			;YES
	TYA
	CLC			;NO. BUMP TO DIFFICULT SCORE TABLE
	ADC I,12.
	TAY
EBT:	LDA AY,SCRTBL		;GET SCORE WEIGHT
	STA Z,EPSCR		;STORE IT FOR THE DISPLAY ROUTINE
	LDA AX,GMTIMD		;GET FRAMES PER CLOCK TICK
	STA Z,FRMTME
	LDA I,00		;INITIALIZE CLOCK TO 100 (BCD)
	STA Z,GTML		;LOW TIMER
	LDA I,20
	STA Z,GTMH		;HIGH
	RTS			;EXIT

GAME:	LDA I,0
	STA Z,SYNC
	LDA I,1
	STA A,OUT2		;TURN OFF START LAMP, CRASH, ATTRACT MODE
	JSR BLKSC		;CLEAR PLAYFIELD
	JSR PUTMSG		;WRITE SCORE LABELS
	LDX I,MT-MESS0-1
	JSR MESLP		;WRITE TIME
	JSR CLRZRO		;CLEAR PAGE ZERO
	JSR INTZRO		;SET OBJECT TABLES
	LDA I,100
	STA Z,SYNC		;SIGNAL GAME TIME, PROCESS SYNC
	JSR GETTRK		;GET TRACK
	JSR HISCR		;DO HIGH SCORE SAVES
	JSR GTM			;GET GAME TIME
MAIN:	JSR SYNWT
	BIT A,TESTSW		;TEST MODE?
	BMI GM0
	JMP TEST
GM0:	LDX I,0
	LDA I,20
	BIT Z,SYNC		;ATTRACT MODE?
	BPL LFG			;NO
	LDA I,6			;YES, FORCE VEL=6
	STA Z,VELH
	STX Z,VELL
	STX Z,STEER		;FORCE STEER=0
	JMP DNEVEL
LFG:	BIT A,GEARS		;GEAR SWITCH CLOSED?
	BEQ FG			;YES
	INX			;NO
	ASL			;ALL SWITCHES TESTED?
	BPL LFG			;NO
FG:	STX Z,R3		;SAVE GEAR NUMBER
	LDA AX,DTBL		;NOPE. GET DECELERATION CONSTANT
	LDX I,VELL
	LDY I,PRODL
	JSR MULT		;COMPUTE FRACTION OF VELOCITY
	LDA Z,PRODH		;GREATER THAN 1?
	BEQ ACLOK		;NO
	LDA I,0			;YES
	STA Z,PRODH		;FORCE TO +0.25 ACCELERATION
	LDA I,100
	STA Z,PRODL
ACLOK:	LDA Z,PRODL
	LSR
	LSR
	CMP I,20		;ACCELERATION < 16?
	BMI SNDOK		;YES
	LDA I,17		;NO. FORCE TEMPORARILY TO 15.
SNDOK:	EOR I,17		;INVERT
	STA Z,R5		;TEMPORARY MOTOR SOUND REGISTER
	LSR Z,PRODL		;HALVE THE ACCELERATION
	JSR NEG			;NEGATE ACCELERATION
	BIT A,ACCEL		;ACCELERATOR PRESSED?
	BPL SMACL		;YEP
	LDA Z,R5		;NO. USE COMPUTED DECELERATION
	STA A,OUT1		;SET MOTOR SOUNDS
	LDA I,0			;CLEAR SCRATCH SOUND TIMER
	STA Z,SMOKE
	JMP DOBRK		;BRAKING EFFECT
SMACL:	LDA I,0
	STA Z,PRODH
	LDA Z,VELL		;USE VELOCITY AS INDEX
	ASL
	LDA Z,VELH
	ROL
	CMP I,40		;VELOCITY < 32
	BMI VELOK		;YES
	LDA I,37		;NO. FORCE IT TEMPORARILY TO 31
VELOK:	ASL
	LSR Z,R3		;ADJUST GEAR NUMBER
	PHP			;SAVE THE CARRY
	ORA Z,R3		;ADD GEAR NUMBER
	TAX
	LDA AX,MOTOR		;GET MOTOR SOUND. IF 2ND OR 4TH -
	BCS MTL			;USE LOW HALF
	LSR
	LSR			;ELSE USE HIGH HALF (1ST OR 3RD)
	LSR
	LSR
MTL:	AND I,17
	STA Z,R5
	STA A,OUT1		;TURN ON MOTOR
	PLP			;GET THE CARRY
	LDA AX,GTBL		;GET ACCELERATION VALUE.  IF 2ND OR 4TH -
	BCS VLO			;USE LOW SIDE
	LSR
	LSR			;ELSE USE HI SIDE (1ST OR 3RD)
	LSR
	LSR
VLO:	AND I,17		;MASK IT
	STA Z,R3		;SAVE IT
	AND I,10		;+ OR -?
	BEQ VPN			;+ LEAVE AS IS
	LDA I,377
	STA Z,PRODH		;ELSE EXTEND SIGN AND
	LDA I,0			;DOWN SHIFT
	STA Z,R5
	STA A,OUT1		;FORCE MAXIMUM REV'S
	LDA I,360
VPN:	ORA Z,R3
	ASL			;DOUBLE ACCELERATION
	STA Z,PRODL
DOBRK:	NOP
	NOP
	NOP
INCVEL:	LDA Z,PRODL		;ACCELERATION?
	BEQ ZRACL		;ZERO
	BMI NACL		;NEGATIVE
	CMP I,8.		;ACCEL > 8.?
	BEQ NACL		;NO
	BCC NACL		;NO
	LDA Z,R5		;MOTOR REG
	ORA I,60		;SET LOUD SCREECH
	STA Z,R5
	STA A,OUT1		;LIGHT 'EM UP (SMOKE 'EM)
	LDA I,20.		;SMOKE 'EM TIMER
	STA Z,SMOKE
	BNE NACL
ZRACL:	LDA I,377		;ACCEL=0.
	BIT Z,VELH		;VELOCITY > 1?
	BNE NACL		;YES
	STA Z,PRODH		;NO. FORCE ACCEL TO -1
	STA Z,PRODL
NACL:	LDA Z,SMOKE		;TIMER RUN OUT?
	BEQ NACL1		;YEP
	DEC Z,SMOKE		;NO. DECREMENT TIMER
	LDA Z,R5
	ORA I,40
	STA A,OUT1		;LIGHT 'EM UP
NACL1:	LDA Z,PRODL
	CLC
	ADC Z,VELL		;UPDATE VELOCITY
	STA Z,VELL
	LDA Z,PRODH
	ADC Z,VELH
	STA Z,VELH
	BPL DNEVEL
	LDA I,0			;DON'T ALLOW VELOCITY TO GO NEGATIVE
	STA Z,VELL
	STA Z,VELH
DNEVEL:	LDX I,VELL		;SET ADDRESS OF MULTIPLICAND
	LDY I,STCL		;ADDRESS OF PRODUCT
	LDA Z,STEER		;STEERING PLUS?
	BPL STRPL		;YES
	EOR I,377		;NO
	CLC			;NEGATE STEERING
	ADC I,1
	JSR MULT		;COMPUTE 'STC' (MINUS)
	JSR STCLMT		;STC TOO BIG? ADJUST IF SO
	JSR NEG			;NEGATE PRODUCT
	JMP CMPCRV

STCLMT:	LDA I,4.
	CMP Z,STCH		;STC > 4?
	BMI STCLM0		;YES
	RTS			;NO. RETURN
STCLM0:	SEC
	LDA Z,STCH
	SBC I,4.		;COMPUTE STC-4
	CMP I,2			;DIFF > 2?
	BMI STCLM1		;NO
	LDA Z,R5		;YES. 4 WHEEL DRIFT
	ORA I,60
	STA Z,R5		;SET SCREECH
STCLM1:	LDA I,3
	NOP
	NOP
	NOP
	STA Z,STCH
	LDA Z,R5
	ORA I,20		;2 OR 4 WHEEL DRIFT
	STA A,OUT1
	RTS

STRPL:	JSR MULT
	JSR STCLMT		;STC TOO BIG? ADJUST IF SO
CMPCRV:	LDY I,CRVL		;ADDRESS OF PRODUCT
	LDA Z,CS		;GET MULTIPLIER
	BPL CRSOK		;POSITIVE RESULT
	AND I,177
	JSR MULT
	JSR NEG				;NEGATIVE RESULT
	JMP STRPL0
CRSOK:	JSR MULT		;COMPUTE CRV
STRPL0:	LDY I,VELKL
	LDA I,140		;SET ACC=KP (VELK)
	JSR MULT		;COMPUTE VEL*KP


;BEGIN PYLON MOTION COMPUTATION

MO:	LDX I,37		;OBJECT INDEX
MOVOBJ:	LDA ZX,ZCNTRL-1		;GET CONTROL BYTE. OBJECT ACTIVE?
	BMI OBJACT		;YES.
	JMP INAOBJ		;NO. SKIP PROCESS OF OBJECT PAIR
OBJACT:	STX Z,XSVE
	LDA ZX,ZYAX		;GET PY
	SEC
	SBC I,PYMIN-2.		;NORMALIZE
	STA Z,PYA
	LDX I,VELKL		;ADDRESS OF MULTIPLICAND
	LDY I,PYAVKL		;ADDRESS OF PRODUCT
	JSR MULT		;COMPUTE PYAVK
	LDX I,VELL
	LDY I,PYAVL
	LDA Z,PYA
	JSR MULT		;COMPUTE PYAV
	LDX Z,XSVE
	LDA ZX,ZXAX-1		;UPDATE X AXIS POSITION ODD SIDE
	SEC
	SBC Z,PYAVKL
	STA ZX,ZXAX-1
	LDA ZX,ZXAX
	SBC Z,PYAVKH
	STA ZX,ZXAX
	LDA ZX,ZCNTRL-1
	BIT Z,PYAVKH		;PYAVKH + OR -?
	BPL OLS1		;PLUS
	SBC I,3			;MINUS. SUBTRACT 3+ CARRY FROM ZCNTRL
	JMP OLS3
OLS1:	SBC I,0			;ELSE SUBTRACT CARRY FROM XCNTRL
OLS3:	AND I,3			;MASK RESULT
	STA Z,R2		;SAVE IT
	LDA ZX,ZCNTRL-1
	AND I,374		;MASK OLD VALUE
	ORA Z,R2		;ADD IN RESULT
	STA ZX,ZCNTRL-1		;UPDATE THE MSB'S OF X POSITION
	CLC
	LDA Z,STCL		;ADD IN STEERING CONSTANTS ODD SIDE
	ADC ZX,ZXAX-1
	STA ZX,ZXAX-1
	LDA Z,STCH
	ADC ZX,ZXAX
	STA ZX,ZXAX
	LDA ZX,ZCNTRL-1		;CARRY OVER 2 BITS INTO ZCNTRL-1
	BIT Z,STCH
	BPL OLS2
	ADC I,3
	JMP OLS4
OLS2:	ADC I,0
OLS4:	AND I,3
	STA Z,R2
	LDA ZX,ZCNTRL-1
	AND I,374
	ORA Z,R2
	STA ZX,ZCNTRL-1
	LDA ZX,ZXAX		;CHECK LIMITS
XLOK:	CMP I,CRLFT		;LEFT CRASH?
	BCC CRLOK		;NO
	LDA I,3
	AND ZX,ZCNTRL-1		;ON SCREEN?
	BNE CRLOK		;NO
	LDA I,100		;YES. SET POSSIBLE CRASH
	ORA ZX,ZCNTRL-1
	STA ZX,ZCNTRL-1
CRLOK:	LDA ZX,ZXAX-3		;GET X POSITION EVEN SIDE
	CLC
	ADC Z,PYAVKL		;UPDATE X POSITION EVEN SIDE
	STA ZX,ZXAX-3
	LDA ZX,ZXAX-2
	ADC Z,PYAVKH
	STA ZX,ZXAX-2
	LDA ZX,ZCNTRL-3
	BIT Z,PYAVKH
	BPL ORS1
	ADC I,3
	JMP ORS3
ORS1:	ADC I,0
ORS3:	AND I,3
	STA Z,R2
	LDA ZX,ZCNTRL-3
	AND I,374
	ORA Z,R2
	STA ZX,ZCNTRL-3
	LDA Z,STCL		;ADD IN STEERING CONSTANTS
	ADC ZX,ZXAX-3
	STA ZX,ZXAX-3
	LDA Z,STCH
	ADC ZX,ZXAX-2
	STA ZX,ZXAX-2
	LDA ZX,ZCNTRL-3
	BIT Z,STCH
	BPL ORS2
	ADC I,3
	JMP ORS4
ORS2:	ADC I,0
ORS4:	AND I,3
	STA Z,R2
	LDA ZX,ZCNTRL-3
	AND I,374
	ORA Z,R2
	STA ZX,ZCNTRL-3
	LDA ZX,ZXAX-2
XROK:	CMP I,CRRHT		;RIGHT CRASH?
	BCS CRROK		;NO
	LDA I,3
	AND ZX,ZCNTRL-3		;ON SCREEN?
	BNE CRROK		;NO
	LDA I,100
	ORA ZX,ZCNTRL-3
	STA ZX,ZCNTRL-3		;SET POSSIBLE CRASH
CRROK:	LDA ZX,ZYAX-1		;UPDATE Y POSITION
	CLC
	ADC Z,PYAVL
	STA ZX,ZYAX-1
	STA ZX,ZYAX-3
	LDA ZX,ZYAX
	ADC Z,PYAVH
	BCS OCR
	STA ZX,ZYAX
	STA ZX,ZYAX-2
	CMP I,BOTTOM		;AT BOTTOM OF SCREEN?
	BCC YPOK		;NO
OCR:	LDA ZX,ZCNTRL-1		;YES. OBJECT AT CRASH LIMIT?
	ORA ZX,ZCNTRL-3
	ASL
	BPL DEACT		;NO. DE-ACTIVATE OBJECT
	BIT Z,SYNC		;ATTRACT MODE?
	BMI DEACT		;YES. IGNORE CRASH
	LDA I,0			;CRASH INTO PYLON
	STA Z,VELL
	STA Z,VELH
	LDA I,0
	STA A,OUT2		;TURN OFF CRASH SOUND
	LDA I,1
	STA A,OUT2		;TURN ON CRASH SOUND
DEACT:	LDA I,17		;MAKE OBJECT INVISIBLE
	STA ZX,ZCNTRL
	STA ZX,ZCNTRL-2
	LDA I,0			;CLEAR OBJECT CONTROL
	STA ZX,ZCNTRL-1
	STA ZX,ZCNTRL-3
	JMP INAOBJ		;CONTINUE
YPOK:	LDA Z,PYA
	CLC
	ADC I,110
	LSR
	STA Z,PYA
	AND I,160
	STA ZX,ZCNTRL		;BUILD OBJECT PICTURE (HORIZ SIZE)
	LDA Z,PYA
	LSR
	LSR
	LSR
	EOR I,17
	ORA ZX,ZCNTRL		;VERTICAL SIZE
	STA ZX,ZCNTRL
	STA ZX,ZCNTRL-2		;DO BOTH OBJECTS OF PAIR
	LDA ZX,ZCNTRL-1
	AND I,277		;DROP CRASH BIT
	STA ZX,ZCNTRL-1
	AND I,3			;ON SCREEN?
	BEQ LOBOK		;YES
	LDA I,17		;NO
	STA ZX,ZCNTRL		;SET OBJECT INVISIBLE
LOBOK:	LDA ZX,ZCNTRL-3
	AND I,277		;DROP CRASH BIT
	STA ZX,ZCNTRL-3
	AND I,3			;ON SCREEN?
	BEQ INAOBJ		;YES
	LDA I,17		;NO
	STA ZX,ZCNTRL-2		;SET OBJECT INVISIBLE
INAOBJ:	LDA Z,STEER
	BIT Z,SYNC		;ATTRACT MODE?
	BMI DEXOBJ		;YES. IGNORE STEERING
	BIT A,STRNG		;ANY CHANGE IN STEERING?
	BPL DEXOBJ		;NO
	BVS SR			;TURN RIGHT
	SEC
	SBC I,3			;OVERFLOW?
	BVS SRST		;YES
	BVC SST
SR:	CLC
	ADC I,3
	BVS SRST
SST:	STA Z,STEER
SRST:	LDA A,STRST		;RESET STEERING
DEXOBJ:	DEX			;DONE ALL 8 OBJECT PAIRS?
	DEX
	DEX
	DEX
	BMI OBJDNE		;YES
	STA A,WTCHDG
	TXA			;SAVE X
	PHA
	JSR COIN		;GAME START?
	PLA
	TAX
	JMP MOVOBJ		;NO
OBJDNE:	CLC
	LDA Z,STCL
	ADC Z,CRVL		;MOVE ORIGIN BY COMPUTING
	STA Z,PRODL		;STC+CRV
	LDA Z,STCH
	ADC Z,CRVH
	STA Z,PRODH
	CLC
	LDA Z,ORL		;ADD TO OLD ORIGIN POSITION
	ADC Z,PRODL
	STA Z,ORL
	LDA Z,ORH
	ADC Z,PRODH
	STA Z,ORH
	LDA Z,ORVH
	BIT Z,PRODH
	BPL ORVV0
	ADC I,3
	JMP ORVV1
ORVV0:	ADC I,0
ORVV1:	AND I,3
	STA Z,ORVH
STPOM:	LDA Z,VELH
	LSR
	STA Z,PRODH
	LDA Z,VELL		;DIVIDE VELOCITY BY 8
	ROR
	STA Z,PRODL
	LSR Z,PRODH
	ROR Z,PRODL
	LSR Z,PRODH
	ROR Z,PRODL
	LDA Z,PRODL
	CLC
	ADC Z,TURNL		;ADD TO TURN TIME
	STA Z,TURNL
	LDA Z,TURNH
	ADC Z,PRODH
	STA Z,TURNH
	CMP Z,DIST		;TURN OVER?
	BCC CNTRN		;CONTINUE TURN
	LDA I,0
	STA Z,TURNL
	STA Z,TURNH
	LDX I,0
	LDY I,2
	LDA I,20
	BIT A,EPSW		;WHICH TRACK?
	BNE NORMT		;NORMAL
	LDY I,376		;SET TO -2
	LDX Z,TRMAX
	DEX
	DEX
NORMT:	TYA
	NOP
	NOP
	NOP
	CLC
	ADC Z,TRNDX
	CMP Z,TRMAX		;ALL OF TRACK PROCESSED?
	BCC GTCS		;NO
	BIT Z,SYNC		;ATTRACT MODE
	BPL RTX			;NO
	LDA I,174
	STA Z,ORH		;CENTER ROAD
RTX:	TXA			;YES
	NOP
	NOP
	NOP
GTCS:	TAY
	STA Z,TRNDX
	LDA NY,TRKADL		;GET CS
	STA Z,CS
	INY
	LDA NY,TRKADL		;GET DIST
	STA Z,DIST
CNTRN:	LDA Z,PRODL		;TRACK DISTANCE COVERED
	CLC			;  DETERMINES WHEN NEW OBJECT MUST
	ADC Z,OBJTML		;  BE PLACED AT ORIGIN
	STA Z,OBJTML
	LDA Z,PRODH
	ADC Z,OBJTMH
	STA Z,OBJTMH
	CMP I,NOT		;NEW OBJECT TIME?
	BMI FI0			;NO
	LDX I,37		;YES
IAOLP:	LDA ZX,ZCNTRL-1		;OBJECT ACTIVE?
	BPL FIOBJ		;NO
	DEX
	DEX
	DEX
	DEX
	BPL IAOLP
FI0:	JMP ELTME		;ALL OBJECTS ACTIVE
FIOBJ:	LDA I,200		;ACTIVATE OBJECTS
	ORA Z,ORVH
	STA ZX,ZCNTRL-1
	STA ZX,ZCNTRL-3
	LDY I,MINPIC
	AND I,3
	BEQ PICOK
	LDY I,17
PICOK:	TYA
	STA ZX,ZCNTRL
	STA ZX,ZCNTRL-2
	LDA Z,ORH
	STA ZX,ZXAX
	CLC
	ADC I,PRSPC		;SEPARATE ORIGIN PYLONS BY 'PRSPC'
	STA ZX,ZXAX-2
	LDA ZX,ZCNTRL-3
	ADC I,0
	AND I,3
	STA Z,R2
	LDA ZX,ZCNTRL-3
	AND I,374
	ORA Z,R2
	STA ZX,ZCNTRL-3
	LDA Z,ORL
	STA ZX,ZXAX-1
	STA ZX,ZXAX-3
	LDA I,PYMIN
	STA ZX,ZYAX-2		;INITIALIZE YAXIS ORIGIN
	STA ZX,ZYAX
	LDA I,0
	STA ZX,ZYAX-1
	STA ZX,ZYAX-3
	STA Z,OBJTMH		;CLEAR NEW OBJECT TIME COUNTER
	STA Z,OBJTML
	LDA I,0
	STA Z,R1
	LDX I,37
	LDA I,3
	STA Z,R0
OFFSCN:	LDA ZX,ZCNTRL-1		;TEST. COUNT OBJECTS DISPLAYED ON SCREEN.

	BPL OS0			;INACTIVE OBJECT.
	BIT Z,R0		;ACTIVE, ON SCREEN?
	BNE OS0			;NO
	INC Z,R1		;YES, COUNT IT
OS0:	DEX			;TEST ALL 16 OBJECTS.
	DEX
	BPL OFFSCN
	LDA Z,R1
	NOP
	NOP
	BNE ELTME
	JSR INTZRO
	LDA I,0
	STA Z,STEER
	STA Z,VELH
	STA Z,VELL
	STA Z,R7
	LDA I,17
	STA A,OUT1		;DROP MOTOR TO LOW RPM
	LDA Z,SYNC
	AND I,277		;DROP PROCESS SYNC BIT
	STA Z,SYNC
	JSR BLKSC		;ERASE SCREEN
	LDX I,OFFRD-MESS0-1
	JSR MESLP		;WRITE OFF ROAD MESSAGE
DMLP0:	JSR SYNWT
	STA A,WTCHDG
	INC Z,FRMCL
	BNE DMLP1
	INC Z,FRMCH
DMLP1:	JSR DECTME		;KEEP GAME TIMER GOING
	INC Z,R7
	LDA Z,R7
	CMP I,180.		;3 SECONDS PASSED?
	BCC DMLP0		;NO
	JSR BLKSC		;ERASE OFF ROAD MESSAGE
	JSR PUTMSG		;RE-WRITE SCORE LABELS
	LDX I,MT-MESS0-1
	JSR MESLP		;WRITE TIME
	LDA Z,SYNC
	ORA I,100		;ENABLE SYNC PROCESSING
	STA Z,SYNC
ELTME:	JSR COIN		;GAME START?
ELT0:	INC Z,FRMCL		;NO
	BNE NELT
	INC Z,FRMCH
	BPL NELT
	LDA I,377
	BIT Z,COINC		;ANY CREDIT?
	BNE NELT
	BIT Z,COINT		;COUNTING COIN?
	BNE NELT
	SEI
	LDX I,377
	TXS
	CLD
	JSR CLRZRO		;RESET
	JMP TESTS
NELT:	BIT Z,SYNC		;ATTRACT MODE?
	BPL FC			;NO
	JSR GETTRK
	JMP MAIN

DECTME:	LDA Z,FRMCL
	CMP Z,FRMTME		;CLOCK TICK?
	BCC FE			;NOPE
	LDA I,0
	STA Z,FRMCL		;YEP
	SED			;YES
	SEC
	LDA Z,GTML
	SBC I,20		;DECREMENT TIME
	STA Z,GTML
	LDA Z,GTMH
	SBC I,0
	STA Z,GTMH
	CLD
	CMP I,231		;99 BCD?
	BNE FE
	LDA I,40
	AND A,EPSW		;EXTENDED PLAY ALLOWED?
	BNE FD			;NO
	LDA I,20
	BIT Z,SYNC		;EXTENDED PLAY ALREADY?
	BNE FD			;YES
	LSR			;NO
	BIT Z,SYNC		;EXTENDED PLAY SCORE REACHED?
	BEQ FD			;NO
	ASL
	ORA Z,SYNC		;SET EXTENDED PLAY
	STA Z,SYNC
	JSR GTM			;RESET GAME TIMER
	LDA Z,OLDTK		;ROLL TRACK TO NEXT MOST COMPLEX TRACK
	LSR
	LSR
	TAY
	LDA AY,ROLL
	TAY
	JSR GTCS3		;ROLL TRACK
FE:	RTS


ROLL:	.BYTE 1,1,0
FD:	LDA I,0
	STA Z,GTML		;ZERO GAME TIMER
	STA Z,GTMH
	LDX I,377
	TXS			;RESTORE STACK
	JSR BLKSC		;CLEAR SCREEN
	JSR PUTMSG		;WRITE LABELS
	JMP ATTRCT


FC:	JSR DECTME		;DO GAME TIME
	LDA Z,VELL
	CLC
	ADC Z,TDISTL		;ACCUMULATE TOTAL DISTANCE
	STA Z,TDISTL
	LDA Z,VELH
	ADC Z,TDISTM
	STA Z,TDISTM
	LDA I,0
	ADC Z,TDISTH
	STA Z,TDISTH
	LDA I,0
	ADC Z,TDSTVH
	STA Z,TDSTVH
	JSR CVDL		;CONVERT MILEAGE TO DECIMAL
	LDA I,VELL
	LDY I,R5
	JSR CVD			;CONVERT VELOCITY TO DECIMAL
	LDA Z,R6
	CMP Z,TPSPDH		;TOP SPEED REACHED?
	BMI SLOW0		;NO
	BEQ SLOW1		;MAYBE
	STA Z,TPSPDH		;YES. UPDATE TOP SPEED
	LDA Z,R5
	STA Z,TPSPDL
SLOW0:	JMP MAIN		;CONTINUE GAME
SLOW1:	LDA Z,R5		;TOP SPEED REACHED?
	CMP Z,TPSPDL
	BMI SLOW0		;NO
	STA Z,TPSPDL		;YES. UPDATE TOP SPEED
	JMP MAIN

GETTRK:	LDY I,1			;TRACK SELECT ROUTINE
GTCS2:	LDA AY,TRKSW		;REACH SWITCH PORT. ON?
	BPL GTCS1		;YES.
	DEY			;NO.
	BPL GTCS2		;ALL SWITCHES TESTED?
GTCS1:	INY			;ADJUST DECODED SWITCH
	TYA			;A NOW HAS A NUMBER 0,1, OR 2
	ASL			;0=PRO		;SWITCH CENTER
	ASL			;1=EXPERT	;SWITCH DOWN
	TAX			;2=NOVICE	;SWITCH UP
	LDA ZX,TOPZ		;FETCH TOP SCORES FROM TABLE
	STA Z,PRTSDL
	LDA ZX,TOPZ+1
	STA Z,PRTSDH
	LDA ZX,TOPZ+2
	STA Z,HML
	LDA ZX,TOPZ+3
	STA Z,HMH
	CPX Z,OLDTK		;IS CURRENT TRACK SAME AS OLD TRACK?
	BEQ GTCS4		;YES
	JSR HISCR		;NO. WRITE TOP SCORES INTO SCORE TABLE
	TYA			;UPDATE OLD TRACK INDICATOR
	ASL
	ASL
	STA Z,OLDTK
GTCS4:	BIT Z,SYNC		;ATTRACT MODE?
	BPL GTCS3		;NO
	RTS			;YES. USING ATTRACT MODE TRACK
GTCS3:	LDA AY,TKMXT		;GET NUMBER OF ENTRIES FOR TRACK
	STA Z,TRMAX
	STA Z,TRNDX
	TYA
	ASL
	TAY
	LDA AY,TKADT		;GET TRACK TABLE ADDRESS
	STA Z,TRKADL
	LDA AY,TKADT+1
	STA Z,TRKADH
	RTS

CVD:	PHA			;SAVE SOURCE ADDRESS
	TAX
	LDA ZX,0		;GET LSB OF SOURCE
	ROL
	ROL
	ROL
	ROL
	AND I,7
	TAX
	LDA AX,MPHL		;PSUEDO CVD. LSB=1 OF 8 0,1,3-6,8,9
	STA AY,0		;SAVE CONVERTED LSB OF BCD ANSWER
	PLA			;GET ADDRESS
	TAX
	LDA ZX,1		;GET MSB OF SOURCE
	CMP I,64.		;TEST FOR MORE THAN 64.
	BMI MPHOK
	LDA I,63.
MPHOK:	STA Z,R2
	LDA I,0
	STA Z,R0		;CLEAR RESULT
	SED			;SET DECIMAL MODE
	LDA I,1
	STA Z,R3		;INITIALIZE BCD CONVERTER
BCDLP:	LSR Z,R2		;BIT SET?
	BCC NOADD		;NO
	LDA Z,R3		;YES. ADD BCD CONVERTER TO RESULT
	CLC
	ADC Z,R0
	STA Z,R0
NOADD:	LDA Z,R2		;ANY BITS LEFT?
	BEQ BCDEND		;NO
	LDA Z,R3		;YES, DOUBLE BCD CONVERTER WITH DECIMAL ADD
	CLC
	ADC Z,R3
	STA Z,R3
	BNE BCDLP		;CONTINUE
BCDEND:	CLD			;RESET DECIMAL MODE
	LDA Z,R0
	STA AY,1		;STORE MSB BCD DATA
	RTS			;EXIT

CHK2K:	.BYTE 237,141


UNPK:	LDA ZX,0		;GET LOW BYTE
	ORA I,60		;FORCE DISPLAYABLE ASCII DIGIT
	STA AY,PLYFLD+2		;WRITE IT ON THE PLAYFIELD
	LDA ZX,1		;GET MSD
	AND I,17		;LOW 4 BITS
	ORA I,60		;MAKE DISPLAYABLE ASCII
	STA AY,PLYFLD+1		;WRITE IT ON THE SCREEN
	LDA ZX,1		;GET MSD
	LSR			;UPPER 4 BITS
	LSR
	LSR
	LSR
	ORA I,60		;MAKE DISPLAYABLE
	STA AY,PLYFLD		;WRITE ON SCREEN
	RTS			;EXIT

UNPKL:	LDA I,1			;LONG UNPACK. Y=ADDRESS OF LSD TO APPEAR ON PLAYFIELD
	STA Z,R3		;R3=NUMBER OF BYTES TO UNPACK, X=ADDRESS OF BCD
	BNE UPKL1		;START WITH UPPER 4 BITS OF LSD
UPKL0:	LDA ZX,0		;GET BYTE
	AND I,17		;LOW 4 BITS
	ORA I,60
	STA AY,PLYFLD		;WRITE IT TO PLAYFIELD
	DEY			;CONTINUE NEXT PLAYFIELD ADDRESS
UPKL1:	LDA ZX,0		;GET BYTE
	LSR			;UPPER 4 BITS
	LSR
	LSR
	LSR
	ORA I,60
	STA AY,PLYFLD		;WRITE IT TO PLAYFIELD
	INX			;BUMP BINARY ADDRESS
	DEY			;PLAYFIELD ADDRESS ADJUST
	DEC Z,R3		;ALL BYTES UNPACKED?
	BPL UPKL0		;NO
	RTS			;YES. EXIT

HISCR:	LDX Z,OLDTK		;GET OLD TRACK INDEX
	LDA Z,MILEM
	CMP ZX,TOPZ+3		;SCORE > OLD SCORE?
	BCC NOHI		;NO
	BEQ HIGH		;MAYBE
	STA ZX,TOPZ+3		;YES
	STA Z,HMH
	LDA Z,MILEL
NOHIL:	STA ZX,TOPZ+2
	STA Z,HML
NOHI:	LDA Z,TPSPDH		;PREVIOUS TOP SPEED
	CMP ZX,TOPZ+1		;REACHED?
	BCC ENDSC		;NO
	BEQ PTSLW		;MAYBE
	STA ZX,TOPZ+1		;YES
	STA Z,PRTSDH
	LDA Z,TPSPDL
ESC:	STA ZX,TOPZ
	STA Z,PRTSDL
ENDSC:	NOP
	LDA I,0			;CLEAR PLAYER'S SCORES WITH
	STA Z,MILEM		;CHANGING OF TRACK SELECT SWITCH
	STA Z,MILEL
	STA Z,TPSPDH
	STA Z,TPSPDL
	RTS			;EXIT
PTSLW:	LDA Z,TPSPDL
	CMP ZX,TOPZ		;PREVIOUS TOP SPEED REACHED?
	BCS ESC			;NO
	BCC ENDSC
HIGH:	LDA Z,MILEL		;NEW SCORE > OLD SCORE?
	CMP ZX,TOPZ+2
	BCC NOHI		;NO
	BCS NOHIL

CVDL:	LDA Z,TDISTM		;LONG CONVERT TO DECIMAL ROUTINE
	ASL			;CONVERTS THE TOTAL DISTANCE TRAVELED
	STA Z,R2		;TO BCD FOR SCORE DISPLAY
	LDA Z,TDISTH
	ROL
	STA Z,R0
	LDA Z,TDSTVH
	ROL
	STA Z,R1		;MULTIPLY TOTAL DISTANCE BY 8.
	ASL Z,R2
	ROL Z,R0
	ROL Z,R1
	ASL Z,R2
	ROL Z,R0
	ROL Z,R1
	LDA Z,EPSCR		;GET TRACK SCORE WEIGHT MULTIPLIER
	LDY I,PRODL		;ADDRESS OF ANSWER
	LDX I,R0		;ADDRESS OF MULTIPLICAND
	ASL			;MULTIPLY BY 2?
	STA Z,MLTPLR		;SAVE MULTIPLIER
	BCC CVDL1		;NO
	LDA Z,R0		;YES. COMPUTE PRODUCT=2*MULTIPLICAND
	ASL
	STA Z,PRODL
	LDA Z,R1
	ROL
	STA Z,PRODH
	JSR MULTS		;DO SPECIAL MULTIPLY. FINISH COMPUTING
	BEQ CVDL0
CVDL1:	JSR MULT		;COMPUTE WEIGHTED SCORE
CVDL0:	SED			;SET DECIMAL MODE
	LDA I,1			;SET BCD CONVERTER=1
	STA Z,R3		;DOUBLE BYTE CONVERTER
	LDA I,0
	STA Z,R4
	STA Z,MILEL		;CLEAR SUM
	STA Z,MILEM
CVDLP0:	LSR Z,PRODH
	ROR Z,PRODL		;BINARY BIT SET?
	BCC CVDLP1		;NO. DON'T ADD
	LDA Z,R3		;YES.
 	CLC			;ADD BCD CONVERTER TO SUM
	ADC Z,MILEL
	STA Z,MILEL
	LDA Z,R4
	ADC Z,MILEM
	STA Z,MILEM
CVDLP1:	CLC			;DOUBLE BCD CONVERTER USING DECIMAL ADD
	LDA Z,R3
	ADC Z,R3
	STA Z,R3
	LDA Z,R4		;DOUBLE BYTE ADD
	ADC Z,R4
	STA Z,R4
	LDA I,377
	BIT Z,PRODH		;ANY BITS LEFT IN BINARY HIGH BYTE
	BNE CVDLP0		;YES
	BIT Z,PRODL		;LOW BYTE?
	BNE CVDLP0		;YES
	CLD			;NO. RETURN
	LDA Z,MILEM
	CMP I,65		;EXTENDED PLAY SCORE? (350)
	BCC CVDLE		;NO
	LDA I,10		;YES
	ORA Z,SYNC		;SET EXTEND PLAY
	STA Z,SYNC
CVDLE:	RTS



;MULTIPLICATION ROUTINE
;
;ACCUM = MULTIPLIER
;Y = ADDRESS OF PRODUCT (LOW BYTE)
;X = ADD RESS OF MULTIPLICAND (LOW BYTE)

MULT:	STA Z,MLTPLR		;SAVE MULTIPLIER
	LDA I,0
	STA AY,0		;CLEAR PRODUCT
	STA AY,1
MULTS:	LDA ZX,0		;GET MULTIPLICAND
	STA Z,MLTCDL
	LDA ZX,1
	STA Z,MLTCDH
MT1:	ASL Z,MLTPLR		;LOOP UNTIL MLTPLR=0
	BCS MT0
	BNE MT2			;AND CARRY CLEAR
	RTS
MT0:	CLC
	LDA AY,0		;ACCUMULATE PRODUCT
	ADC Z,MLTCDL
	STA AY,0
	LDA AY,1
	ADC Z,MLTCDH
	STA AY,1
	CLC
MT2:	LDA Z,MLTCDH
	BPL MT3
	SEC
MT3:	ROR Z,MLTCDH		;HALVE MULTIPLICAND
	ROR Z,MLTCDL
	JMP MT1

NEG:	LDA AY,0		;NEGATE DOUBLE BYTE AT ADDRESS
	EOR I,377		;SPECIFIED IN Y REGISTER
	CLC
	ADC I,1
	STA AY,0
	LDA AY,1
	EOR I,377
	ADC I,0
	STA AY,1
	RTS

CLRZRO:	LDX I,ZHI-ZLOW+1	;BYTE COUNT
CLRZVH:	LDA I,0
CLRZ:	STA ZX,ZLOW-1		;CLEAR PAGE ZERO
	LDA ZX,ZLOW-1		;DID IT CLEAR?
	BEQ CLZ0		;YES
	JMP ZPERR		;NO. PRINT ERROR MESSAGE
CLZ0:	DEX
	BNE CLRZ
	RTS

INTZRO:	LDX I,95.		;INITIALIZE PYLON TABLES
	LDA I,0
IT0:	STA ZX,ZCNTRL		;BY FIRST CLEARING ALL BYTES,
	DEX
	BNE IT0
	LDY I,6
	LDX I,0
ZCZLP0:	LDA AY,IPIX		;THEN MOVING IN INITIAL PICTURE INFO AND
	STA ZX,ZCNTRL+1
	STA ZX,ZCNTRL+3
	LDA I,200		;ACTIVATING OBJECTS
	STA ZX,ZCNTRL
	STA ZX,ZCNTRL+2
	INX
	INX
	INX
	INX
	DEY
	BPL ZCZLP0
	LDA I,17		;THEN BY MOVING IN BLANK PICTURE DATA
	STA ZX,ZCNTRL+1		;FOR INACTIVE OBJECTS
	STA ZX,ZCNTRL+3
	TXA
	CLC
	ADC I,5			;UPDATE INDEX
	TAX
	LDY I,13.
ZCZLP1:	LDA AY,IXD		;PUT IN INITIAL X AXIS POSITION
	STA ZX,ZCNTRL
	INX
	INX
	DEY
	BPL ZCZLP1
	INX
	INX
	INX
	INX
	LDY I,6
ZCZLP2:	LDA AY,IYD		;THEN PUT IN INITIAL Y AXIS POSITION
	STA ZX,ZCNTRL
	STA ZX,ZCNTRL+2
	INX
	INX
	INX
	INX
	DEY
	BPL ZCZLP2
	LDA I,0
	STA Z,ORL		;CENTER ORIGIN
	STA Z,ORVH
	LDA I,174
	STA Z,ORH
	LDA I,177
	STA Z,DIST		;INITIALIZE DISTANCE
	RTS			;EXIT

SYNWT:	CLI
	LDA I,1
	BIT Z,SYNC		;INTERRUPT YET?
	BNE SY0			;YEP
	JSR LFC			;ANY COIN?
	BCC SYNWT		;NO?
	SEI			;YES
	TXA			;SAVE X AND Y
	PHA
	TYA
	PHA
	JSR COIN		;PROCESS COIN
	LDA I,376		;RESET SYNC FOUND
	AND Z,SYNC
	STA Z,SYNC
	PLA
	TAY
	PLA
	TAX
	JMP SYNWT
SY0:	EOR Z,SYNC
	STA Z,SYNC
	SEI
	RTS

VSYNC:	PHA			;SAVE REGS
	TXA
	PHA
	TSX
	LDA AX,403
	AND I,20		;BREAKPOINT?
	BEQ VS0			;NO
	PLA			;YES
	TAX
	PLA
	JMP 70122		;JUMP TO DEMON
VS0:	TYA
	PHA
	LDA I,40		;PAGE ZERO ERROR TRAP?
	BIT Z,SYNC
	BEQ VTST		;NO
	LDX I,0		;YES. WRITE 'ERR Z XX' ON LINE 4
PEW0:	LDA AX,PZRERR
	BNE PEW1
	TYA			;GET FAILING BIT(S) MSB
	LSR			;CONVERT TO HEX
	LSR
	LSR
	LSR
	TAX
	LDA AX,HEX
	STA A,PLYFLD+140+PZE-PZRERR	;DISPLAY THEM
	TYA
	AND I,17		;FAILING BITS LSB
	TAX
	LDA AX,HEX
	STA A,PLYFLD+141+PZE-PZRERR	;DISPLAY THEM
	JMP RESET
PEW1:	STA AX,PLYFLD+140
	INX
	BNE PEW0
VTST:	BVC GOEND
	LDY I,15.
	LDX I,31.
LOOP:	LDA ZX,ZCNTRL		;PICTURE INFORMATION
	STA AY,PICTR
	LDA ZX,ZXAX		;X AXIS DATA
	EOR I,377
	STA AY,XAXIS
	LDA ZX,ZYAX		;Y AXIS DATA
	STA AY,YAXIS
	DEX
	DEX
	DEY
	BPL LOOP
	LDA Z,FRMCL		;YES
	AND I,17		;16 FRAMES?
	BNE SSSC		;NO
	LDA I,20	
	BIT Z,SYNC		;ATTRACT MODE?, EXTENDED PLAY?
	BMI GOM			;ATTRACT MODE.
	BEQ SSSD		;NOT EXTENDED PLAY.
	LDX I,EPMSG-GO		;EXTENDED PLAY
	BNE GOOE
GOM:	LDX I,0
GOOE:	LDY I,53
	LDA I,20
	BIT Z,FRMCL		;E/O?
	BEQ GOWRT		;EVEN WRITE GAME OVER
GOLP:	LDA I,0			;ODD BLANK GAME OVER
	STA AY,PLYFLD
	INY
	INX
	LDA AX,GO
	BNE GOLP
GOEND:	BEQ ESYNC
GOWRT:	LDA AX,GO
	BEQ ESYNC
	STA AY,PLYFLD
	INY
	INX
	BNE GOWRT
SSSC:	BIT Z,SYNC		;ATTRACT MODE?
	BPL SSSD		;NO
	LDX I,HML
	LDY I,PHS
	JSR UNPKL		;UNPACK HIGH SCORE
	LDX I,PRTSDL
	LDY I,PPTP
	JSR UNPK		;UNPACK HIGH TOP SPEED
SSSD:	LDX I,TPSPDL
	LDY I,YTPSPD
	JSR UNPK		;UNPACK YOUR TOP SPEED
	LDX I,MILEL
	LDY I,PSCORE
	JSR UNPKL		;UNPACK YOUR SCORE
	BIT Z,SYNC		;ATTRACT MODE
	BMI ESYNC		;YES. SKIP TIME OUTPUT
	LDX I,GTML
	LDY I,76
	JSR UNPKL		;UNPACK TIME
ESYNC:	LDA I,1
	ORA Z,SYNC
	STA Z,SYNC		;SIGNAL SYNC PROCESSED
	PLA
	TAY			;RESTORE REGS
	PLA
	TAX
	PLA
	RTI

	.EVEN

CHK3K:	.BYTE 67,311

CHKADR:	.WORD CHK3K,CHK2K,CHK1K
	.REPT 117772-.		;9FFA-.
	.BYTE 377
	.ENDR
	.=117772
VCTORS:	.WORD RESET,RESET,VSYNC

WROB	=71261
CRLF	=71212
SPACE	=71567

	.END
                                                                                                                                                                                                                                                                                                                                                                                                                        